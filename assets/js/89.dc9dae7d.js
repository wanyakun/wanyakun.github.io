(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{588:function(e,t,s){"use strict";s.r(t);var a=s(4),n=function(e){e.options.__data__block__={mermaid_1a962850:"sequenceDiagram\n  participant C as 客户端\n  participant S as 服务器\n  C->>S: connection open\n  loop\n    C->S: 数据传送 \n  end\n  C->>S: connection close\n"}},r=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#是什么"}},[e._v("#")]),e._v(" 是什么")]),e._v(" "),s("p",[e._v("WebSocket，是一种网络传输协议，位于OSI模型的应用层。可在单个TCP连接上进行全双工通信，能更好的节省服务器资源和带宽并达到实时通迅"),s("br"),e._v("\n客户端和服务器只需要完成一次握手，两者之间就可以创建持久性的连接，并进行双向数据传输")]),e._v(" "),s("Mermaid",{attrs:{id:"mermaid_1a962850",graph:e.$dataBlock.mermaid_1a962850}}),s("p",[e._v("websocket服务器与客户端通过握手连接，连接成功后，两者都能主动的向对方发送或接受数据"),s("br"),e._v("\n在websocket出现之前，开发实时web应用的方式为轮询，不停地向服务器发送 HTTP 请求，问有没有数据，有数据的话服务器就用响应报文回应。如果轮询的频率比较高，那么就可以近似地实现“实时通信”的效果"),s("br"),e._v("\n轮询的缺点也很明显，反复发送无效查询请求耗费了大量的带宽和 CPU资源")]),e._v(" "),s("h2",{attrs:{id:"特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[e._v("#")]),e._v(" 特点")]),e._v(" "),s("h3",{attrs:{id:"全双工"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#全双工"}},[e._v("#")]),e._v(" 全双工")]),e._v(" "),s("p",[e._v("通信允许数据在两个方向上同时传输，它在能力上相当于两个单工通信方式的结合"),s("br"),e._v("\n例如指 A→B 的同时 B→A ，是瞬时同步的")]),e._v(" "),s("h3",{attrs:{id:"二进制帧"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二进制帧"}},[e._v("#")]),e._v(" 二进制帧")]),e._v(" "),s("p",[e._v("采用了二进制帧结构，语法、语义与 HTTP 完全不兼容，相比http/2，WebSocket更侧重于“实时通信”，而HTTP/2 更侧重于提高传输效率，所以两者的帧结构也有很大的区别"),s("br"),e._v("\n不像 HTTP/2 那样定义流，也就不存在多路复用、优先级等特性"),s("br"),e._v("\n自身就是全双工，也不需要服务器推送")]),e._v(" "),s("h3",{attrs:{id:"协议名"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#协议名"}},[e._v("#")]),e._v(" 协议名")]),e._v(" "),s("p",[e._v("引入ws和wss分别代表明文和密文的websocket协议，且默认端口使用80或443，几乎与http一致")]),e._v(" "),s("h3",{attrs:{id:"握手"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#握手"}},[e._v("#")]),e._v(" 握手")]),e._v(" "),s("p",[e._v("WebSocket也要有一个握手过程，然后才能正式收发数据\n客户端发送数据格式如下：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("GET /chat HTTP/1.1\nHost: server.example.com\nUpgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Key: "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("dGhlIHNhbXBsZSBub25jZQ")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("==")]),e._v("\nOrigin: http://example.com\nSec-WebSocket-Protocol: chat, superchat\nSec-WebSocket-Version: "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("13")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br")])]),s("ul",[s("li",[e._v("Connection：必须设置Upgrade，表示客户端希望连接升级")]),e._v(" "),s("li",[e._v("Upgrade：必须设置Websocket，表示希望升级到Websocket协议")]),e._v(" "),s("li",[e._v("Sec-WebSocket-Key：客户端发送的一个 base64 编码的密文，用于简单的认证秘钥。要求服务端必须返回一个对应加密的“Sec-WebSocket-Accept应答，否则客户端会抛出错误，并关闭连接")]),e._v(" "),s("li",[e._v("Sec-WebSocket-Version ：表示支持的Websocket版本")])]),e._v(" "),s("p",[e._v("服务端返回的数据格式：")]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("HTTP/1.1 "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("101")]),e._v(" Switching Protocols\nUpgrade: websocket\nConnection: Upgrade\nSec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("Sec-WebSocket-Protocol: chat\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])]),s("ul",[s("li",[e._v("HTTP/1.1 101 Switching Protocols：表示服务端接受 WebSocket 协议的客户端连接")]),e._v(" "),s("li",[e._v("Sec-WebSocket-Accep：验证客户端请求报文，同样也是为了防止误连接。具体做法是把请求头里“Sec-WebSocket-Key”的值，加上一个专用的 UUID，再计算摘要")])]),e._v(" "),s("h3",{attrs:{id:"优点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[e._v("#")]),e._v(" 优点")]),e._v(" "),s("ul",[s("li",[e._v("较少的控制开销：数据包头部协议较小，不同于http每次请求需要携带完整的头部")]),e._v(" "),s("li",[e._v("更强的实时性：相对于HTTP请求需要等待客户端发起请求服务端才能响应，延迟明显更少")]),e._v(" "),s("li",[e._v("保持创连接状态：创建通信后，可省略状态信息，不同于HTTP每次请求需要携带身份验证")]),e._v(" "),s("li",[e._v("更好的二进制支持：定义了二进制帧，更好处理二进制内容")]),e._v(" "),s("li",[e._v("支持扩展：用户可以扩展websocket协议、实现部分自定义的子协议")]),e._v(" "),s("li",[e._v("更好的压缩效果：Websocket在适当的扩展支持下，可以沿用之前内容的上下文，在传递类似的数据时，可以显著地提高压缩率")])]),e._v(" "),s("h2",{attrs:{id:"应用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[e._v("#")]),e._v(" 应用场景")]),e._v(" "),s("p",[e._v("基于websocket的事实通信的特点，其存在的应用场景大概有：")]),e._v(" "),s("ul",[s("li",[e._v("弹幕")]),e._v(" "),s("li",[e._v("媒体聊天")]),e._v(" "),s("li",[e._v("协同编辑")]),e._v(" "),s("li",[e._v("基于位置的应用")]),e._v(" "),s("li",[e._v("体育实况更新")]),e._v(" "),s("li",[e._v("股票基金报价实时更新")])])],1)}),[],!1,null,null,null);"function"==typeof n&&n(r);t.default=r.exports}}]);