(window.webpackJsonp=window.webpackJsonp||[]).push([[111],{620:function(t,s,a){"use strict";a.r(s);var n=a(4),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("原理：运行时创建子类，并重写监听属性的setter方法，在修改前后分别调用"),a("code",[t._v("willChangeValueForKey")]),t._v("和"),a("code",[t._v("didChangeValueForKey")]),t._v("方法，然后进行isa swizling。")]),t._v(" "),a("h2",{attrs:{id:"实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现原理"}},[t._v("#")]),t._v(" 实现原理")]),t._v(" "),a("p",[t._v("KVO是基于runtime机制实现的"),a("br"),t._v("\n当某个类的属性对象第一次被观察时，系统就会在运行期动态地创建该类的一个派生类，在这个派生类中重写基类中任何被观察属性的setter 方法。派生类在被重写的setter方法内实现真正的通知机制"),a("br"),t._v("\n如果原类为ClassName，那么生成的派生类名为"),a("code",[t._v("NSKVONotifying_ClassName")]),a("br"),t._v("\n每个类对象中都有一个isa指针指向当前类，当一个类对象的第一次被观察，那么系统会偷偷将isa指针指向动态生成的派生类，从而在给被监控属性赋值时执行的是派生类的setter方法"),a("br"),t._v("\n键值观察通知依赖于NSObject 的两个方法: "),a("code",[t._v("willChangeValueForKey:")]),t._v(" 和 "),a("code",[t._v("didChangevlueForKey:")]),t._v("；在一个被观察属性发生改变之前， "),a("code",[t._v("willChangeValueForKey:")]),t._v("一定会被调用，这就 会记录旧的值。而当改变发生后，"),a("code",[t._v("didChangeValueForKey:")]),t._v("会被调用，继而 "),a("code",[t._v("observeValueForKey:ofObject:change:context:")]),t._v("也会被调用。"),a("br"),t._v(" "),a("strong",[t._v("补充：")]),t._v(" KVO的这套实现机制中苹果还偷偷重写了class方法，让我们误认为还是使用的当前类，从而达到隐藏生成的派生类")]),t._v(" "),a("h2",{attrs:{id:"如何手动关闭kvo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何手动关闭kvo"}},[t._v("#")]),t._v(" 如何手动关闭KVO")]),t._v(" "),a("div",{staticClass:"language-objc line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-objc"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BOOL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("automaticallyNotifiesObserversForKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key isEqualToString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"closeType"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" NO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v(" automaticallyNotifiesObserversForKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("setProperty"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("Property "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_Property"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v("Property"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" willChangeValueForKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"Property"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        _Property"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("Property"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),t._v(" didChangeValueForKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('@"Property"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br")])]),a("h2",{attrs:{id:"通过kvc修改属性会触发kvo吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通过kvc修改属性会触发kvo吗"}},[t._v("#")]),t._v(" 通过KVC修改属性会触发KVO吗")]),t._v(" "),a("p",[t._v("会触发KVO操作，KVC时候会先查询对应的 getter 和 setter 方法。"),a("br"),t._v("\n如果返回 YES，那么可以直接修改实例变量。")]),t._v(" "),a("div",{staticClass:"language-objc line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-objc"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BOOL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("accessInstanceVariablesDirectly "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" NO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("ul",[a("li",[t._v("KVC 调用 getter 流程：getKEY，KEY，isKEY, _KEY，接着是实例变量 _KEY,_isKEY, KEY, isKEY;")]),t._v(" "),a("li",[t._v("KVC 调用 setter 流程：setKEY和 _setKEY，实例变量顺序 _KEY,_isKEY, KEY, isKEY，没找到就调用 setValue: forUndefinedKey:")])]),t._v(" "),a("h2",{attrs:{id:"哪些情况下使用kvo会崩溃-怎么防护崩溃"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#哪些情况下使用kvo会崩溃-怎么防护崩溃"}},[t._v("#")]),t._v(" 哪些情况下使用KVO会崩溃，怎么防护崩溃？")]),t._v(" "),a("ul",[a("li",[t._v("dealloc没有移除kvo观察者"),a("br"),t._v("\n解决方案：创建一个中间对象，将其作为某个属性的观察者，然后dealloc的时候去做移除观察者，而调用者是持有中间对象的，调用者释放了，中间对象也释放了，dealloc 也就移除观察者了；")]),t._v(" "),a("li",[t._v("多次重复移除同一个属性，移除了未注册的观察者")]),t._v(" "),a("li",[t._v("被观察者提前被释放，被观察者在 dealloc 时仍然注册着 KVO，导致崩溃。"),a("br"),t._v("\n例如：被观察者是局部变量的情况（iOS 10 及之前会崩溃） 比如 weak ；")]),t._v(" "),a("li",[t._v("添加了观察者，但未实现 observeValueForKeyPath:ofObject:change:context:方法，导致崩溃；")]),t._v(" "),a("li",[t._v("添加或者移除时 keypath == nil，导致崩溃；")])]),t._v(" "),a("h2",{attrs:{id:"kvo的优缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kvo的优缺点"}},[t._v("#")]),t._v(" KVO的优缺点")]),t._v(" "),a("p",[a("strong",[t._v("KVO优点：")])]),t._v(" "),a("ul",[a("li",[t._v("能够提供一种简单的方法实现两个对象的同步；")]),t._v(" "),a("li",[t._v("能够对内部对象的状态改变作出响应，而且不需要改变内部对象的实现；")]),t._v(" "),a("li",[t._v("能够提供被观察者属性的最新值和之前的值；")]),t._v(" "),a("li",[t._v("使用key Path来观察属性，因此可以观察嵌套对象；")]),t._v(" "),a("li",[t._v("完成了对观察对象的抽象，因为不需要额外的代码来允许观察者被观察。")])]),t._v(" "),a("p",[a("strong",[t._v("KVO缺点：")])]),t._v(" "),a("ul",[a("li",[t._v("KVO只能检测类中的属性，并且属性名都是通过NSString来查找，编译器不会补全（编译时不会出现警告），容易写错；")]),t._v(" "),a("li",[t._v("对属性重构，将导致观察代码不可用；")]),t._v(" "),a("li",[t._v("复杂的 “if” 语句要求对象正在观察多个值，是因为所有的观察代码通过一个方法来指向；")])])])}),[],!1,null,null,null);s.default=e.exports}}]);