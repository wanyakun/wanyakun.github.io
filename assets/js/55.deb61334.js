(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{491:function(t,a,s){"use strict";s.r(a);var e=s(7),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("通知是同步的, 发送通知的流程：总的来说，就是根据Notification Name查找对应的Observer链表，然后遍历整个链表，给每个Observer节点中保持的对象及SEL发送消息，也就是调用对象的SEL方法"),s("br"),t._v("\n首先会定一个数组ObserverArray来保存需要通知的Observer。先遍历wildcard链表，将其中所有的Observer加入到数组中（因为wildcard链表中的observe接收所有的通知）"),s("br"),t._v("\n找到以object为key的Observer链表。这个过程分为在Named Table和UnNamed Table中查找，然后将遍历查找到的链表，同样加入到数组中。"),s("br"),t._v("\n遍历数组，依次取出节点发送Notification")]),t._v(" "),s("h2",{attrs:{id:"实现原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现原理"}},[t._v("#")]),t._v(" 实现原理")]),t._v(" "),s("h3",{attrs:{id:"数据结构关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据结构关系"}},[t._v("#")]),t._v(" 数据结构关系")]),t._v(" "),s("p",[t._v("NSNotificationCenter定义了两个Table（nameless和named），同时为了封装观察者信息，也定义了Observation保存观察者信息。他们的结构体可以简化如下所示：")]),t._v(" "),s("div",{staticClass:"language-objc line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-objc"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 根容器，NSNotificationCenter持有")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" NCTbl "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  Observation\t\t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("wildcard"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 链表结构，保存既没有name也没有object的通知 */")]),t._v("\n  GSIMapTable\t\tnameless"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 存储没有name但是有object的通知\t*/")]),t._v("\n  GSIMapTable\t\tnamed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 存储带有name的通知，不管有没有object\t*/")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" NCTable"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Observation（链表） 存储观察者和响应结构体，基本的存储单元")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typedef")]),t._v("\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v("\tObs "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  id\t\tobserver"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 观察者，接收通知的对象\t*/")]),t._v("\n  SEL\t\tselector"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 响应方法\t\t*/")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Obs\t"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Next item in linked list.\t*/")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" Observation"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br")])]),s("p",[t._v("在NSNotificationCenter内部一共保存了两张表，一张用于保存添加观察者的时候传入的NotificationName的情况；一张用于保存添加观察者的时候没有传入NotificationName的情况")]),t._v(" "),s("h3",{attrs:{id:"named-table"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#named-table"}},[t._v("#")]),t._v(" Named Table")]),t._v(" "),s("p",[t._v("结构为两层Table嵌套，外层以通知名称为Key，其value同样是一个Table，内层Table以Object为key，用链表保存所有的观察者，并且以这个链表为value")]),t._v(" "),s("ul",[s("li",[t._v("key(name)")]),t._v(" "),s("li",[t._v("value(mapTable)\n"),s("ul",[s("li",[t._v("key(object)")]),t._v(" "),s("li",[t._v("value(Observation对象)")])])])]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/img/ios/basic/named-table.jpg",alt:"Named Table"}})]),t._v(" "),s("h3",{attrs:{id:"unnamed-table"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#unnamed-table"}},[t._v("#")]),t._v(" UnNamed Table")]),t._v(" "),s("p",[t._v("相对于Named Table，少了一层外层Table")]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/img/ios/basic/unnamed-table.jpg",alt:"UnNamed Table"}})]),t._v(" "),s("p",[t._v("如果在注册观察者时没有传入NotificationName，同时没有传入object，所有的系统通知都会发送到注册的对象里, 即wildcard链表中所有的对象。")]),t._v(" "),s("h3",{attrs:{id:"添加观察者流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#添加观察者流程"}},[t._v("#")]),t._v(" 添加观察者流程")]),t._v(" "),s("p",[t._v("添加观察者一般调用方法"),s("code",[t._v("[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(onEventNotification:) name:NotificationName object:nil];")]),t._v("来实现，大致流程如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/assets/img/ios/basic/notification-add.png",alt:"Notifcation add"}})]),t._v(" "),s("h3",{attrs:{id:"发送通知流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#发送通知流程"}},[t._v("#")]),t._v(" 发送通知流程")]),t._v(" "),s("p",[t._v("发送通知流程")])])}),[],!1,null,null,null);a.default=n.exports}}]);