(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{522:function(t,e,a){"use strict";a.r(e);var s=a(7),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("键值编码，是Key Value Coding 的简称，Cocoa的标准组成部分，是一种可以直接通过字符串的名字(Key)来访问类属性的机制，而不是通过调用Setter方法、Getter方法进行访问")]),t._v(" "),a("h2",{attrs:{id:"常见方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见方法"}},[t._v("#")]),t._v(" 常见方法")]),t._v(" "),a("div",{staticClass:"language-objc line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-objc"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取方法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nullable id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("valueForKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nullable id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("valueForKeyPath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("keyPath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nullable id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("valueForUndefinedKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//可变集合获取方法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSMutableArray "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("mutableArrayValueForKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSMutableOrderedSet "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("mutableOrderedSetValueForKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NS_AVAILABLE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("_7"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("_0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSMutableSet "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("mutableSetValueForKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSMutableArray "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("mutableArrayValueForKeyPath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("keyPath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSMutableOrderedSet "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("mutableOrderedSetValueForKeyPath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("keyPath "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("NS_AVAILABLE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("_7"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("_0"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSMutableSet "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("mutableSetValueForKeyPath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("keyPath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//设置方法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("setValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nullable id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("value forKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("setValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nullable id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("value forKeyPath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("keyPath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("setValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nullable id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("value forUndefinedKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("setNilValueForKey"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NSString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br")])]),a("h2",{attrs:{id:"kvc原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kvc原理"}},[t._v("#")]),t._v(" KVC原理")]),t._v(" "),a("blockquote",[a("p",[t._v("通过查找头文件NSKeyValueCoding.h注释可以发现KVC的执行过程")])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("valueForKey:（valueForKeyPath:类似）")]),t._v(" "),a("ul",[a("li",[t._v("首先，在对象类中按顺序查找存取器名称为"),a("code",[t._v("-get<key>")]),t._v(", "),a("code",[t._v("-<key>")]),t._v(", "),a("code",[t._v("-is<key>")]),t._v("的方法，如果找到则直接调用，如果方法返回结果类型为指针类型，则直接返回。如果方法返回结果类型是数量类型支持NSNumber转换，则返回NSNumber，否则转化成NSValue并返回（任意类型的结果转换成NSValue，不仅NSPoint，NSRect和NSSize）；")]),t._v(" "),a("li",[t._v("否则（找不到存取器方法），查找"),a("code",[t._v("-countOf<Key>")]),t._v(", "),a("code",[t._v("-indexIn<Key>OfObject:")]),t._v(", "),a("code",[t._v("-objectIn<Key>AtIndex:")]),t._v("和"),a("code",[t._v("-<key>AtIndexes:")]),t._v("，如果count方法，index方法和另外两个方法中至少一个方法找到，返回一个能够响应NSOrderedSet所有方法的代理集合对象（"),a("em",[t._v("NSKeyValueOrderedSet")]),t._v("）。每个NSOrderedSet消息发送给代理集合对象时，当消息发送给原始接收器的"),a("code",[t._v("valueForKey:")]),t._v("都会被转换成"),a("code",[t._v("-countOf<Key>")]),t._v(", "),a("code",[t._v("-indexIn<Key>OfObject:")]),t._v(", "),a("code",[t._v("-objectIn<Key>AtIndex:")]),t._v("和"),a("code",[t._v("-<key>AtIndexes:")]),t._v("的组合来返回。如果实现了可选方法"),a("code",[t._v("-get<Key>:range:")]),t._v("，方法也将被调用来进行性能优化。")]),t._v(" "),a("li",[t._v("否则（找不到存取器方法和NSOrderedSet访问方法），查找"),a("code",[t._v("-countOf<Key>")]),t._v(", "),a("code",[t._v("-objectIn<Key>AtIndex:")]),t._v("和"),a("code",[t._v("-<key>AtIndexes:")]),t._v("，如果count方法和另外两个方法中至少一个方法找到，返回一个能够响应NSArray所有方法的代理集合对象。每个NSArray消息发送给代理集合对象时（"),a("em",[t._v("NSKeyValueArray")]),t._v("），当消息发送给原始接收器的"),a("code",[t._v("valueForKey:")]),t._v("都会被转换成"),a("code",[t._v("-countOf<Key>")]),t._v(", "),a("code",[t._v("-objectIn<Key>AtIndex:")]),t._v("和"),a("code",[t._v("-<key>AtIndexes:")]),t._v("的组合来返回。如果实现了可选方法"),a("code",[t._v("-get<Key>:range:")]),t._v("，方法也将被调用来进行性能优化。")]),t._v(" "),a("li",[t._v("否则（找不到存取器方法、NSOrderedSet访问方法和array访问方法），查找"),a("code",[t._v("-countOf<Key>")]),t._v(", "),a("code",[t._v("-enumeratorOf<Key>")]),t._v("和"),a("code",[t._v("-memberOf<Key>:")]),t._v("，如果三个方法都找到，返回一个能够响应NSSet所有方法的代理集合对象（NSKeyValueSet）。每个NSSet消息发送给代理集合对象时，当消息发送给原始接收器的"),a("code",[t._v("valueForKey:")]),t._v("都会被转换成"),a("code",[t._v("-countOf<Key>")]),t._v(", "),a("code",[t._v("-enumeratorOf<Key>")]),t._v("和"),a("code",[t._v("-memberOf<key>:")]),t._v("的组合来返回。")]),t._v(" "),a("li",[t._v("否则（找不到存取器方法和集合访问方法），如果+accessInstanceVariablesDirectly属性返回YES，则按顺序查找符合名称"),a("code",[t._v("_< key >")]),t._v(","),a("code",[t._v("_is< Key >")]),t._v(","),a("code",[t._v("< key >")]),t._v(", 或者 "),a("code",[t._v("is< Key >")]),t._v("的实例变量。如果找到实例变量，则返回实例变量的值，转换NSNumber和NSValue同步骤1.")]),t._v(" "),a("li",[t._v("否则（找不到存取器方法，集合访问方法和实例变量），调用"),a("code",[t._v("-valueForUndefinedKey:")]),t._v("返回结果。"),a("code",[t._v("-valueForUndefinedKey:")]),t._v("的默认实现是抛出一个NSUndefinedKeyException异常，但是你覆盖此方法。")])]),t._v(" "),a("p",[a("strong",[t._v("注意：")])]),t._v(" "),a("p",[t._v("对于集合(NSArray, NSSet, NSOrderSet)像使用普通对象一样，则返回代理对象，需要实现以下方法")])])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("NSArray")]),t._v(" "),a("th",[t._v("NSSet")]),t._v(" "),a("th",[t._v("NSOrderSet")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("-countOf<Key>")])]),t._v(" "),a("td",[a("code",[t._v("-countOf<Key>")])]),t._v(" "),a("td",[a("code",[t._v("-countOf<Key>")])])]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td",[a("code",[t._v("-enumeratorOf<Key>")])]),t._v(" "),a("td",[a("code",[t._v("-indexIn<Key>OfObject:")])])]),t._v(" "),a("tr",[a("td",[a("em",[t._v("One of")])]),t._v(" "),a("td",[a("code",[t._v("-memberOf<Key>:")])]),t._v(" "),a("td",[a("em",[t._v("One of")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("-objectIn<Key>AtIndex:")])]),t._v(" "),a("td"),t._v(" "),a("td",[a("code",[t._v("-objectIn<Key>AtIndex:")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("-<key>AtIndexes:")])]),t._v(" "),a("td"),t._v(" "),a("td",[a("code",[t._v("-<key>AtIndexes:")])])]),t._v(" "),a("tr",[a("td",[a("em",[t._v("Optional (performance)")])]),t._v(" "),a("td"),t._v(" "),a("td",[a("em",[t._v("Optional (performance)")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("-get<Key>:range:")])]),t._v(" "),a("td"),t._v(" "),a("td",[a("code",[t._v("-get<Key>:range:")])])])])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[t._v("setValue: forKey: （setValue: forKeyPath:类似）")]),t._v(" "),a("ul",[a("li",[t._v("首先，查找类存取器方法"),a("code",[t._v("-set<Key>:")]),t._v("。如果找到此方法则检测参数类型。如果参数类型不是对象指针类型但值是nil，则调用"),a("code",[t._v("-setNilValueForKey:")]),t._v("方法，"),a("code",[t._v("-setNilValueForKey:")]),t._v("方法的默认实现是抛出一个NSInvalidArgumentException异常，但是你可以覆盖此方法。否则如果方法参数类型是对象指针类型，则直接调用此方法并传入value做为参数。如果方法参数类型是其他类型，NSNumber/NSValue的逆转换在方法"),a("code",[t._v("-valueFor<Key>")]),t._v("被调用的时候执行。")]),t._v(" "),a("li",[t._v("否则（没有存取器方法），如果+accessInstanceVariablesDirectly属性返回YES，则按顺序查找符合名称"),a("code",[t._v("_< key >")]),t._v(","),a("code",[t._v("_is< Key >")]),t._v(","),a("code",[t._v("< key >")]),t._v(", 或者 "),a("code",[t._v("is< Key >")]),t._v("的实例变量。如果找到实例变量，并且它的类型是对象指针类型，则对旧值进行release操作，然后对value进行retain操作并赋值给实例变量。如果是其他类型，则同步骤1进行NSNumber/NSValue进行转换然后再赋值。")]),t._v(" "),a("li",[t._v("否则（没有存取器方法和实例变量），调用"),a("code",[t._v("setValue:forUndefinedkey:")]),t._v("方法，"),a("code",[t._v("setValue:forUndefinedkey:")]),t._v("方法的默认实现是抛出一个NSUndefinedKeyException异常，但是你可以覆盖此方法。")])])]),t._v(" "),a("li",[a("p",[t._v("可变集合"),a("code",[t._v("-mutableArrayValueForKey:key")]),t._v("，"),a("code",[t._v("-mutableOrderedSetValueForKey:key")]),t._v("，"),a("code",[t._v("-mutableSetValueForKey:key")])]),t._v(" "),a("p",[t._v("默认实现存取器方法时和"),a("code",[t._v("-valueForKey:key")]),t._v("一样。返回代理对象时需要实现的方法有差别。如下：")])])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("NSMutableArray / NSMutableOrderedSet")]),t._v(" "),a("th",[t._v("NSMutableSet")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("em",[t._v("At least 1 insertion and 1 removal method")])]),t._v(" "),a("td",[t._v("* At least 1 addition and 1 removal method")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("-insertObject:in<Key>AtIndex:")])]),t._v(" "),a("td",[a("code",[t._v("-add<Key>Object:")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("-removeObjectFrom<Key>AtIndex:")])]),t._v(" "),a("td",[a("code",[t._v("-remove<Key>Object:")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("-insert<Key>:atIndexes:")])]),t._v(" "),a("td",[a("code",[t._v("-add<Key>:")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("-remove<Key>AtIndexes:")])]),t._v(" "),a("td",[a("code",[t._v("-remove<Key>:")])])]),t._v(" "),a("tr",[a("td",[a("em",[t._v("Optional (performance) one of")])]),t._v(" "),a("td",[t._v("* Optional (performance)")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("-replaceObjectIn<Key>AtIndex:withObject:")])]),t._v(" "),a("td",[a("code",[t._v("-intersect<Key>:")])])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("-replace<Key>AtIndexes:with<Key>:")])]),t._v(" "),a("td",[a("code",[t._v("-set<Key>:")])])])])])])}),[],!1,null,null,null);e.default=n.exports}}]);