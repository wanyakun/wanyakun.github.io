(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{679:function(v,_,t){"use strict";t.r(_);var a=t(4),o=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("blockquote",[t("p",[v._v("上一篇文章中已经介绍了在公司进行的iOS App架构设计，架构设计出来后是要进行落地的，具体的落地方案既不能影响现有App迭代节奏，又要尽快进行落地实施，所以制定了以下方案")])]),v._v(" "),t("p",[v._v("目标：走向插件化，插件独立开发，独立编译，独立发布")]),v._v(" "),t("p",[v._v("但从目前的项目状况来看，直接走向这里是不太现实。主要有以下原因：")]),v._v(" "),t("ul",[t("li",[v._v("代码需要梳理")]),v._v(" "),t("li",[v._v("业务持续迭代")]),v._v(" "),t("li",[v._v("要适应新的开发方式")])]),v._v(" "),t("p",[v._v("但不能不去改变，可以分步执行，平稳过度")]),v._v(" "),t("p",[v._v("我们把插件化分为几个步骤，下面会分别介绍每个步骤。")]),v._v(" "),t("h3",{attrs:{id:"使用cocoapods"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用cocoapods"}},[v._v("#")]),v._v(" 使用CocoaPods")]),v._v(" "),t("p",[v._v("使用起CocoaPods管理第三方库依赖，将第三方类库通过CocoaPods引入。对于不支持CocoaPods的第三方库，放入Vendor文件夹。")]),v._v(" "),t("p",[t("img",{attrs:{src:"/assets/img/2017/CocoaPods.png",alt:"CocoaPods"}})]),v._v(" "),t("h3",{attrs:{id:"文件夹隔离"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#文件夹隔离"}},[v._v("#")]),v._v(" 文件夹隔离")]),v._v(" "),t("p",[v._v("文件夹隔离只是一个过渡阶段。需要这样一个过渡阶段的原因是，产品开发不会因为我们要重构项目就停止，避免直接拆分一次性集中付出很长时间解决编译错误。也为团队提供了一个转变开发方式的缓冲期。文件夹隔离使得组员逐步适应模块化的思维。")]),v._v(" "),t("p",[v._v("我们首先需要改变项目的文件组织结构\n目前项目怎么样划分的都有，没有统一标准，甚至Controller、View、Model在一起，网络请求写到Controller里")]),v._v(" "),t("p",[v._v("首先我们要对项目划分模块，业务模块的划分首先需要在全体组员间达成共识。从此，大家开始有了模块化的意识。新增文件会被放入对应的模块之中；code review 时会提出不应该引用其他业务模块的要求和建议。后续的产品功能也被归入到对应的模块之中")]),v._v(" "),t("p",[v._v("每个模块再划分出自己的Controller、View、Model、"),t("strong",[v._v("Network")]),v._v("等文件夹")]),v._v(" "),t("blockquote",[t("p",[v._v("建议：")]),v._v(" "),t("ol",[t("li",[v._v("对Controller进行瘦身，划分网络层服务层，将每个网络请求做成请求服务，以便复用")]),v._v(" "),t("li",[v._v("对TableView Collection等协议实现方法抽取，使文件结构更清晰")])])]),v._v(" "),t("p",[t("img",{attrs:{src:"/assets/img/2017/folder.png",alt:"folde"}})]),v._v(" "),t("p",[v._v("虽然改为按模块组织项目的文件结构，但此时，所有模块仍然还在一个仓库里。这其实只是做到了文件夹隔离，代码并没有被真正隔离。")]),v._v(" "),t("p",[t("img",{attrs:{src:"/assets/img/2017/module.png",alt:"模块化1"}})]),v._v(" "),t("p",[v._v("下一步我们会查看各个文件的 #import 部分，减少业务模块间的相互依赖。几个业务模块都用到的文件，则会沉入到公共层。")]),v._v(" "),t("h3",{attrs:{id:"抽出业务无关的库-base-library"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#抽出业务无关的库-base-library"}},[v._v("#")]),v._v(" 抽出业务无关的库（Base Library）")]),v._v(" "),t("p",[v._v("将一些与业务无关的代码抽象成一个个独立的库。这类库应该是与产品无关，与业务无关的，不会随着产品和业务的频繁变化而变化")]),v._v(" "),t("p",[v._v("未拆分之前各个库的代码混在项目中，就存在相互干扰的可能性。拆分的独立库都有了自己清晰的边界，使得项目代码中有了更多的隔离，提升项目质量")]),v._v(" "),t("p",[v._v("拆分独立的库使得复用成为了可能，我们可以在新项目中使用它们，甚至将其开源，供其他开发者使用。")]),v._v(" "),t("p",[v._v("拆分出去的模块，必须先处理好它的依赖，它将只能依赖已经拆分出去的组件和第三方库，为拆分出公共底层模块打下了基础")]),v._v(" "),t("h3",{attrs:{id:"拆出公共底层模块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#拆出公共底层模块"}},[v._v("#")]),v._v(" 拆出公共底层模块")]),v._v(" "),t("p",[v._v("在拆分出很多与业务无关的库后，我们仍然有一部分代码是公共的，为多个业务模块所使用的，和业务有一定的关系。这部分代码由于和业务相关，拆分出去也没有复用的可能。但却是拆分业务模块的前提条件。将公共底层模块拆分后，我们才能着手业务模块的拆分")]),v._v(" "),t("p",[v._v("在拆分公共模块时，有两种方法：")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("一种是，划分为一个个子模块，将这些子模块一个个拆分出去")])]),v._v(" "),t("li",[t("p",[v._v("一种是，作为一个整体先摘出来，内部各子模块之间的依赖关系先按文件夹隔离的方式运作一段时间。如果，发现一个子模块确实可以拆出去了再拆出去。")])])]),v._v(" "),t("p",[v._v("第一种方式更优雅一些。如果完成，各个业务模块可以选择自己需要的依赖。但是也更困难一些。因为，这需要花很长时间理清楚各个子模块之间的依赖关系。")]),v._v(" "),t("p",[v._v("第二种方式更简单一些。作为一个整体摘出来，就只要处理好和外部其他模块的依赖关系。这个工作量就小很多了。")]),v._v(" "),t("p",[v._v("为了减少前期工作了，可以选择第二种方式。")]),v._v(" "),t("h3",{attrs:{id:"业务模块独立"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#业务模块独立"}},[v._v("#")]),v._v(" 业务模块独立")]),v._v(" "),t("p",[v._v("这一部分的工作是解除业务模块之间的依赖。使得模块都只依赖拆分出去的库和第三方库。")]),v._v(" "),t("p",[v._v("最终的目的是，业务模块独立，并拆分到单独的库中。由容易到困难的顺序拆分各个业务模块")]),v._v(" "),t("p",[v._v("业务模块都单独建立了可以运行的CocoaPods Example项目。这样，就可以真正独立开发，独立运行。")]),v._v(" "),t("p",[v._v("我们的开发流程就变为：")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("先在模块库中开发新的产品功能，使用模块自有Example查看结果。")])]),v._v(" "),t("li",[t("p",[v._v("完成之后在主项目中升级业务模块库的版本，在主项目中验证测试集成效果。")])])])])}),[],!1,null,null,null);_.default=o.exports}}]);