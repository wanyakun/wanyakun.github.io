(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{548:function(v,_,a){"use strict";a.r(_);var t=a(4),r=Object(t.a)({},(function(){var v=this,_=v.$createElement,a=v._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("p",[v._v("用户态线程和内核态线程有什么区别？"),a("br"),v._v("\n这个问题有很多小问题组合而成，比如：")]),v._v(" "),a("ul",[a("li",[v._v("用户态和内核态是什么")]),v._v(" "),a("li",[v._v("用户级线程和内核级线程是怎样的对应关系")]),v._v(" "),a("li",[v._v("内核响应系统调用是一个怎样的过程？")]),v._v(" "),a("li",[v._v("....")])]),v._v(" "),a("h2",{attrs:{id:"什么是用户态和内核态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是用户态和内核态"}},[v._v("#")]),v._v(" 什么是用户态和内核态")]),v._v(" "),a("p",[v._v("Kernel 运行在超级权限模式（Supervisor Mode）下，所以拥有很高的权限。按照权限管理的原则，多数应用程序应该运行在最小权限下。因此，很多操作系统，将内存分成了两个区域：")]),v._v(" "),a("ul",[a("li",[v._v("内核空间（Kernal Space），这个空间只有内核程序可以访问")]),v._v(" "),a("li",[v._v("用户空间（User Space），这部分内存专门给应用程序使用")])]),v._v(" "),a("h3",{attrs:{id:"用户态和内核态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用户态和内核态"}},[v._v("#")]),v._v(" 用户态和内核态")]),v._v(" "),a("p",[v._v("用户空间中的代码被限制了只能使用一个局部的内存空间，我们说这些程序在"),a("strong",[v._v("用户态（User Mode）")]),v._v(" 执行"),a("br"),v._v("\n内核空间中的代码可以访问所有内存，我们称这些程序在**内核态（Kernal Mode） **执行。")]),v._v(" "),a("h3",{attrs:{id:"系统调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#系统调用"}},[v._v("#")]),v._v(" 系统调用")]),v._v(" "),a("p",[v._v("如果用户态程序需要执行系统调用，就需要切换到内核态执行。")]),v._v(" "),a("p",[a("img",{attrs:{src:"/assets/img/ios/multithread/trap.png",alt:"trap"}})]),v._v(" "),a("p",[v._v("内核程序执行在内核态（Kernal Mode），用户程序执行在用户态（User Mode）。当发生系统调用时，用户态的程序发起系统调用。因为系统调用中牵扯特权指令，用户态程序权限不足，因此会中断执行，也就是 Trap（Trap 是一种中断）。"),a("br"),v._v("\n发生中断后，当前 CPU 执行的程序会中断，跳转到中断处理程序。内核程序开始执行，也就是开始处理系统调用。内核处理完成后，主动触发 Trap，这样会再次发生中断，切换回用户态工作。")]),v._v(" "),a("h2",{attrs:{id:"线程模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程模型"}},[v._v("#")]),v._v(" 线程模型")]),v._v(" "),a("p",[v._v("一个应用程序启动后会在内存中创建一个执行副本，这就是进程。Linux 的内核是一个 Monolithic Kernel（宏内核），因此可以看作一个进程。也就是开机的时候，磁盘的内核镜像被导入内存作为一个执行副本，成为内核进程。"),a("br"),v._v("\n进程可以分成用户态进程和内核态进程两类。用户态进程通常是应用程序的副本，内核态进程就是内核本身的进程。如果用户态进程需要申请资源，比如内存，可以通过系统调用向内核申请。")]),v._v(" "),a("p",[v._v("那么用户态进程如果要执行程序，是否也要向内核申请呢？")]),v._v(" "),a("p",[v._v("程序在现代操作系统中并不是以进程为单位在执行，而是以一种轻量级进程（Light Weighted Process），也称作线程（Thread）的形式执行。"),a("br"),v._v("\n一个进程可以拥有多个线程。进程创建的时候，一般会有一个主线程随着进程创建而创建。")]),v._v(" "),a("p",[v._v("如果进程想要创造更多的线程，就需要思考一件事情，这个线程创建在用户态还是内核态？"),a("br"),v._v("\n难道不是用户态的进程创建用户态的线程，内核态的进程创建内核态的线程吗？")]),v._v(" "),a("p",[v._v("其实不是，进程可以通过 API 创建用户态的线程，也可以通过系统调用创建内核态的线程。")]),v._v(" "),a("h3",{attrs:{id:"用户态线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用户态线程"}},[v._v("#")]),v._v(" 用户态线程")]),v._v(" "),a("p",[v._v("用户态线程也称作用户级线程（User Level Thread）。操作系统内核并不知道它的存在，它完全是在用户空间中创建。")]),v._v(" "),a("p",[v._v("优点：")]),v._v(" "),a("ul",[a("li",[v._v("管理开销小：创建、销毁不需要系统调用")]),v._v(" "),a("li",[v._v("切换成本低：用户空间程序可以自己维护，不需要走操作系统调度。")])]),v._v(" "),a("p",[v._v("缺点：")]),v._v(" "),a("ul",[a("li",[v._v("与内核协作成本高：比如这种线程完全是用户空间程序在管理，当它进行 I/O 的时候，无法利用到内核的优势，需要频繁进行用户态到内核态的切换。")]),v._v(" "),a("li",[v._v("线程间协作成本高：设想两个线程需要通信，通信需要 I/O，I/O 需要系统调用，因此用户态线程需要支付额外的系统调用成本。")]),v._v(" "),a("li",[v._v("无法利用多核优势：比如操作系统调度的仍然是这个线程所属的进程，所以无论每次一个进程有多少用户态的线程，都只能并发执行一个线程，因此一个进程的多个线程无法利用多核的优势。")]),v._v(" "),a("li",[v._v("操作系统无法针对线程调度进行优化：当一个进程的一个用户态线程阻塞（Block）了，操作系统无法及时发现和处理阻塞问题，它不会更换执行其他线程，从而造成资源浪费。")])]),v._v(" "),a("h3",{attrs:{id:"内核态线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内核态线程"}},[v._v("#")]),v._v(" 内核态线程")]),v._v(" "),a("p",[v._v("内核态线程也称作内核级线程（Kernel Level Thread）。这种线程执行在内核态，可以通过系统调用创造一个内核级线程。")]),v._v(" "),a("p",[v._v("优点：")]),v._v(" "),a("ul",[a("li",[v._v("可以利用多核 CPU 优势：内核拥有较高权限，因此可以在多个 CPU 核心上执行内核线程。")]),v._v(" "),a("li",[v._v("操作系统级优化：内核中的线程操作 I/O 不需要进行系统调用；一个内核线程阻塞了，可以立即让另一个执行。")])]),v._v(" "),a("p",[v._v("缺点：")]),v._v(" "),a("ul",[a("li",[v._v("创建成本高：创建的时候需要系统调用，也就是切换到内核态。")]),v._v(" "),a("li",[v._v("扩展性差：由一个内核程序管理，不可能数量太多。")]),v._v(" "),a("li",[v._v("切换成本较高：切换的时候，也同样存在需要内核操作，需要切换内核态。")])]),v._v(" "),a("h2",{attrs:{id:"用户态线程和内核态线程之间的映射关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用户态线程和内核态线程之间的映射关系"}},[v._v("#")]),v._v(" 用户态线程和内核态线程之间的映射关系")]),v._v(" "),a("p",[v._v("通常我们会在内核中预先创建一些线程，并反复利用这些线程。")]),v._v(" "),a("h3",{attrs:{id:"多对一-many-to-one"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多对一-many-to-one"}},[v._v("#")]),v._v(" 多对一（Many to One）")]),v._v(" "),a("p",[v._v("用户态进程中的多线程复用一个内核态线程。这样，极大地减少了创建内核态线程的成本，但是线程不可以并发。因此，这种模型现在基本上用的很少")]),v._v(" "),a("h3",{attrs:{id:"一对一-one-to-one"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一对一-one-to-one"}},[v._v("#")]),v._v(" 一对一（One to One）")]),v._v(" "),a("p",[v._v("该模型为每个用户态的线程分配一个单独的内核态线程，在这种情况下，每个用户态都需要通过系统调用创建一个绑定的内核线程，并附加在上面执行。 这种模型允许所有线程并发执行，能够充分利用多核优势，Windows NT 内核采取的就是这种模型。但是因为线程较多，对内核调度的压力会明显增加。")]),v._v(" "),a("h3",{attrs:{id:"多对多-many-to-many"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多对多-many-to-many"}},[v._v("#")]),v._v(" 多对多（Many To Many）")]),v._v(" "),a("p",[v._v("这种模式下会为 n 个用户态线程分配 m 个内核态线程。m 通常可以小于 n。一种可行的策略是将 m 设置为核数。这种多对多的关系，减少了内核线程，同时也保证了多核心并发。Linux 目前采用的就是该模型。")]),v._v(" "),a("h3",{attrs:{id:"两层设计-two-level"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#两层设计-two-level"}},[v._v("#")]),v._v(" 两层设计（Two Level）")]),v._v(" "),a("p",[v._v("这种模型混合了多对多和一对一的特点。多数用户态线程和内核线程是 n 对 m 的关系，少量用户线程可以指定成 1 对 1 的关系。")]),v._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[v._v("#")]),v._v(" 总结")]),v._v(" "),a("p",[v._v("用户态线程工作在用户空间，内核态线程工作在内核空间。用户态线程调度完全由进程负责，通常就是由进程的主线程负责。相当于进程主线程的延展，使用的是操作系统分配给进程主线程的时间片段。内核线程由内核维护，由操作系统调度。")]),v._v(" "),a("p",[v._v("用户态线程无法跨核心，一个进程的多个用户态线程不能并发，阻塞一个用户态线程会导致进程的主线程阻塞，直接交出执行权限。这些都是用户态线程的劣势。内核线程可以独立执行，操作系统会分配时间片段。因此内核态线程更完整，也称作轻量级进程。内核态线程创建成本高，切换成本高，创建太多还会给调度算法增加压力，因此不会太多。")]),v._v(" "),a("p",[v._v("实际操作中，往往结合两者优势，将用户态线程附着在内核态线程中执行。")])])}),[],!1,null,null,null);_.default=r.exports}}]);