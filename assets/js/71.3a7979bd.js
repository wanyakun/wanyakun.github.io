(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{579:function(t,e,a){"use strict";a.r(e);var _=a(4),n=function(t){t.options.__data__block__={mermaid_382ee167:"sequenceDiagram\n  participant C as 客户端\n  participant S as 服务器\n  Note left of C: CLOSED\n  Note right of S: LISTEN\n  C->>S: SYN=1,seq=x\n  Note left of C: SYN_SENT\n  S->>C: SYN=1,ACK=1,seq=y,ack=x+1\n  Note right of S: SYN_RCVD\n  C->>S: ACK=1,seq=x+1,ack=y+1\n  Note left of C: ESTABLISHED\n  Note right of S: ESTABLISHED\n  loop\n    C->S: 数据传送 \n  end\n",mermaid_382ee21f:"sequenceDiagram\n  participant C as 客户端\n  participant S as 服务器\n  Note left of C: ESTABLISHED\n  Note right of S: ESTABLISHED\n  C->>S: FIN=1,seq=u\n  Note left of C: FIN_WAIT1\n  S->>C: ACK=1,seq=v,ack=u+1\n  Note right of S: CLOSE_WAIT\n  Note left of C: FIN_WAIT2\n  S->>C: FIN=1,ACK=1,seq=w,ack=u+1\n  Note right of S: LAST_ACK\n  C->>S: ACK=1,seq=u+1,ack=w+1\n  Note left of C: TIME_WAIT\n  Note right of S: CLOSED\n  C->>C: 等待2MSL\n  Note left of C: CLOSED\n",mermaid_64a56fe8:"sequenceDiagram\n  participant C as 客户端\n  participant S as 服务器\n\n  Note left of C: CLOSED\n  Note right of S: LISTEN\n  C->>S: SYN=1,seq=x\n  Note left of C: SYN_SENT\n  S->>C: SYN=1,ACK=1,seq=y,ack=x+1\n  Note right of S: SYN_RCVD\n  C->>S: ACK=1,seq=x+1,ack=y+1\n  Note left of C: ESTABLISHED\n  Note right of S: ESTABLISHED\n  loop\n    C->S: 数据传送 \n  end\n  C->>S: FIN=1,seq=u\n  Note left of C: FIN_WAIT1\n  S--\x3e>C: Data\n  S->>C: ACK=1,seq=v,ack=u+1\n  Note right of S: CLOSE_WAIT\n  Note left of C: FIN_WAIT2\n  S->>C: FIN=1,ACK=1,seq=w,ack=u+1\n  Note right of S: LAST_ACK\n  C->>S: ACK=1,seq=u+1,ack=w+1\n  Note left of C: TIME_WAIT\n  Note right of S: CLOSED\n  C->>C: 等待2MSL\n  Note left of C: CLOSED\n"}},S=Object(_.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"三次握手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三次握手"}},[t._v("#")]),t._v(" 三次握手")]),t._v(" "),a("p",[t._v("三次握手（Three-way Handshake）其实就是指建立一个TCP连接时，需要客户端和服务器总共发送3个包"),a("br"),t._v("\n主要作用就是为了确认双方的接收能力和发送能力是否正常、指定自己的初始化序列号为后面的可靠性传送做准备"),a("br"),t._v("\n过程如下：")]),t._v(" "),a("ul",[a("li",[t._v("第一次握手：客户端给服务端发一个 SYN 报文，并指明客户端的初始化序列号 ISN(c)，此时客户端处于 SYN_SENT 状态")]),t._v(" "),a("li",[t._v("第二次握手：服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，为了确认客户端的 SYN，将客户端的 ISN+1作为ACK的值，此时服务器处于 SYN_RCVD 的状态")]),t._v(" "),a("li",[t._v("第三次握手：客户端收到 SYN 报文之后，会发送一个 ACK 报文，值为服务器的ISN+1。此时客户端处于 ESTABLISHED 状态。服务器收到 ACK 报文之后，也处于 ESTABLISHED 状态，此时，双方已建立起了连接")])]),t._v(" "),a("Mermaid",{attrs:{id:"mermaid_382ee167",graph:t.$dataBlock.mermaid_382ee167}}),a("p",[t._v("作用：")]),t._v(" "),a("ul",[a("li",[t._v("第一次握手：客户端发送网络包，服务端收到了 这样服务端就能得出结论：客户端的发送能力、服务端的接收能力是正常的。")]),t._v(" "),a("li",[t._v("第二次握手：服务端发包，客户端收到了 这样客户端就能得出结论：服务端的接收、发送能力，客户端的接收、发送能力是正常的。不过此时服务器并不能确认客户端的接收能力是否正常")]),t._v(" "),a("li",[t._v("第三次握手：客户端发包，服务端收到了。 这样服务端就能得出结论：客户端的接收、发送能力正常，服务器自己的发送、接收能力也正常")])]),t._v(" "),a("p",[t._v("通过三次握手，就能确定双方的接收和发送能力是正常的。之后就可以正常通信了")]),t._v(" "),a("h3",{attrs:{id:"为什么不是两次握手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么不是两次握手"}},[t._v("#")]),t._v(" 为什么不是两次握手")]),t._v(" "),a("p",[t._v("如果是两次握手，发送端可以确定自己发送的信息能对方能收到，也能确定对方发的包自己能收到，但接收端只能确定对方发的包自己能收到 无法确定自己发的包对方能收到"),a("br"),t._v("\n并且两次握手的话, 客户端有可能因为网络阻塞等原因会发送多个请求报文，延时到达的请求又会与服务器建立连接，浪费掉许多服务器的资源")]),t._v(" "),a("h2",{attrs:{id:"四次挥手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四次挥手"}},[t._v("#")]),t._v(" 四次挥手")]),t._v(" "),a("p",[t._v("tcp终止一个连接，需要经过四次挥手"),a("br"),t._v("\n过程如下：")]),t._v(" "),a("ul",[a("li",[t._v("第一次挥手：客户端发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于 FIN_WAIT1 状态，停止发送数据，等待服务端的确认")]),t._v(" "),a("li",[t._v("第二次挥手：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 +1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT状态")]),t._v(" "),a("li",[t._v("第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 LAST_ACK 的状态")]),t._v(" "),a("li",[t._v("第四次挥手：客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 +1 作为自己 ACK 报文的序列号值，此时客户端处于 TIME_WAIT状态。需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态，服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态")])]),t._v(" "),a("Mermaid",{attrs:{id:"mermaid_382ee21f",graph:t.$dataBlock.mermaid_382ee21f}}),a("h3",{attrs:{id:"为什么需要四次挥手"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要四次挥手"}},[t._v("#")]),t._v(" 为什么需要四次挥手？")]),t._v(" "),a("ul",[a("li",[t._v("关闭连接时，客户端向服务端发送 FIN 时，仅仅表示客户端不再发送数据了但是还能接收数据。")]),t._v(" "),a("li",[t._v("服务器收到客户端的 FIN 报文时，先回一个 ACK应答报文（这样客户端便不会因为没有收到应答而继续发送断开连接的请求，即FIN报文），而服务端可能还有数据需要处理和发送，等服务端不再发送数据时，才发送 FIN 报文给客户端来表示同意现在关闭连接。")])]),t._v(" "),a("p",[t._v("服务端通常需要等待完成数据的发送和处理，所以服务端的 ACK 和 FIN 一般都会分开发送，从而比三次握手导致多了一次。")]),t._v(" "),a("h3",{attrs:{id:"三次挥手可以吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三次挥手可以吗"}},[t._v("#")]),t._v(" 三次挥手可以吗？")]),t._v(" "),a("p",[t._v("可以的。"),a("br"),t._v("\n因为服务器端收到客户端的FIN后，服务器端同时也要关闭连接，这样就可以把ACK和FIN合并到一起发送，节省了一个包，变成了“三次挥手”。"),a("br"),t._v("\n三次挥手的前提是server端不会再发送数据了")]),t._v(" "),a("h3",{attrs:{id:"为什么要等待2msl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么要等待2msl"}},[t._v("#")]),t._v(" 为什么要等待2MSL")]),t._v(" "),a("p",[t._v("首先说明什么是MSL，MSL是Maximum Segment Lifetime的缩写，译为报文最大生存时间，也就是任何报文在网络上存活的最大时间，一旦超过该时间，报文就会被丢弃")]),t._v(" "),a("ol",[a("li",[t._v("首先服务端在发送FIN后处于LAST_ACK状态，如果收不到客户断发送的ACK，则会重新发送FIN")]),t._v(" "),a("li",[t._v("客户端发送ACK后会有两种结果\n"),a("ul",[a("li",[t._v("服务端没有收到ACK，超时重传FIN，客户端会再次发送ACK")]),t._v(" "),a("li",[t._v("服务端收到ACK，则不再发送任何消息直接变为CLOSED")])])])]),t._v(" "),a("p",[t._v("所以无论那种情况，客户端都要等待，要取两种情况等待时间的最大值，以应对最坏的情况，即： 客户端发送ACK消息最大存活时间(MSL）+ 服务端重发FIN消息的最大存活时间(MSL) = 2MSL")]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("完整的过程如下：")]),t._v(" "),a("Mermaid",{attrs:{id:"mermaid_64a56fe8",graph:t.$dataBlock.mermaid_64a56fe8}})],1)}),[],!1,null,null,null);"function"==typeof n&&n(S);e.default=S.exports}}]);